# Функция может принимать несколько параметров, это необходимо для обработки структур
def calculate_structure_sum(*data):
# Для подсчёта суммы использую глобальную переменную sum, иначе в процессе рекурсивного вызова функции значение переменной сотрётся
    global sum
# Прохожу циклом по принятой структуре данных
    for element in data:
# Если элемент типа int, произвожу суммирование инкрементом
        if isinstance(element, int):
            sum += element
# Если элемент типа str, суммирую длину строки
        elif isinstance(element, str):
            sum += len(element)
# Если элемент типа dict (словарь), запускаю рекурсивно функцию, в качестве аргумента передаю пары словаря (ключ, значение)
# Словарь - самый сложный элемент для обработки, поэтому превращаю в список кортежей методом items
        elif isinstance(element, dict):
            calculate_structure_sum(*element.items())
# Если все остальные типы данных (список, кортеж, множество), запускаю рекуррсивно функцию, в качестве аргумента передаю распакованную структуру
# Список, кортеж, множество обрабатываются одинаково
        else:
            calculate_structure_sum(*element)
# Функция возвращает сумму чисел и длин строк
    return sum

# Переменная sum используется для суммирования чисел и длин строк
sum = 0

# Исходная структура с данными
data_structure = [[1, 2, 3],{'a': 4, 'b': 5},(6, {'cube': 7, 'drum': 8}),"Hello",((), [{(2, 'Urban', ('Urban2', 35))}])]

# Единственный вызов функции
result = calculate_structure_sum(data_structure)
print(result)

